distod {

  system-name = "distod"
  system-role = "leader"

  // set input to test data
  input {
    path = "src/test/resources/data/test.csv"
    has-header = no
  }

  // do not write results to console, but to file in target dir
  output-file = "target/test-results.txt"
  output-to-console = off
  // reduce batching size for test dataset
  result-batch-size = 1

  host = "127.0.0.1"
  port = 7878
  leader-host = ${distod.host}
  leader-port = ${distod.port}

  // only use one worker
  max-parallelism = 1
  max-workers = ${distod.max-parallelism}

  partition-compaction {
    enabled = yes
    interval = 1m
    level-access-threshold = 50000
  }

  monitoring {
    interval = 1s
    heap-eviction-threshold = 85
    statistics-log-interval = 5s
    statistics-log-level = "DEBUG"
  }

  cpu-bound-tasks-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      keep-alive-time = 20s
      core-pool-size-min = 2
      core-pool-size-factor = 0.5
      core-pool-size-max = 16
      max-pool-size-min = 2
      max-pool-size-factor = 1.0
      max-pool-size-max = 32
      task-queue-size = 1
      task-queue-type = "linked"
    }
    throughput = 2
  }

  master-pinned-dispatcher {
    executor = "thread-pool-executor"
    type = PinnedDispatcher
    thread-pool-executor {
      fixed-pool-size = 1
      allow-core-timeout = off
    }
    throughput = 1
  }
}

akka {

  // set log level to info
  loglevel = "INFO"

  coordinated-shutdown {
    terminate-actor-system = on

    run-by-jvm-shutdown-hook = off
    run-by-actor-system-terminate = on

    // disable hard exit of JVM (using System.exit)
    exit-jvm = off

    phases: {
      stop-workers {
        timeout = 1m
      }
      before-service-unbind {
        depends-on = [stop-workers]
      }
    }
  }
}
