distod {

  // actor system name used in remoting
  system-name = "distod"
  // role of the actor system in the cluster (either leader or follower)
  system-role = "leader"

  input {
    // filepath pointing to a dataset that is read and analyzed for ODs
    path = "data/test.csv"
    //    path = "data/flights_20_500k.csv"
    // if the input file has a header
    has-header = no

    // restrict number of columns
    //    max-columns = 10
    // restrict number of rows
    //    max-rows = 1000

  }

  // filepath where the result is stored
  output-file = "data/results.txt"
  // should the results also be printed to console?
  output-to-console = on
  // number of dependencies that are grouped into one message to be sent to the result collector by the proxies
  result-batch-size = 100

  // network configuration of current node
  host = "127.0.0.1"
  port = 7878

  // remote address of leader node
  leader-host = ${distod.host}
  leader-port = ${distod.port}

  // limit the number of workers spawned by this node
  // actual: #workers = min(#cores, max-workers)
  max-workers = 64

  // Dispatcher used for CPU-bound task processing to free up default dispatcher from this heavy load.
  // A step towards making nodes in a cluster responsive (allow scheduled cluster heartbeats and custom gossip)
  cpu-bound-tasks-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    // Configuration for the thread pool
    thread-pool-executor {
      // Keep alive time for threads
      keep-alive-time = 20s

      // core pool: number of threads spawned when queue is not full yet (we limited the queue to be of size 1)
      core-pool-size-min = 2
      core-pool-size-factor = 0.5 // ceil(available processors * factor)
      core-pool-size-max = 16

      // max number of threads (thread capacitiy)
      max-pool-size-min = 2
      max-pool-size-factor = 1.0
      max-pool-size-max = 32

      // Specifies the bounded capacity of the task queue (< 1 == unbounded)
      task-queue-size = 1
      task-queue-type = "linked"
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 2
  }
}

akka {

  // use SLF4J logger
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-config-on-start = off

}
